package rules.cep2;

import com.ftn.sbnz.model.WeatherCondition;
import java.time.LocalDate;
import java.util.List;
import java.util.stream.Collectors
import com.ftn.sbnz.model.Alarm
import com.ftn.sbnz.model.enums.AlarmType;
import com.ftn.sbnz.model.SoilMoisture;
import com.ftn.sbnz.model.Plant;
import com.ftn.sbnz.model.enums.PlantFunctionality;
import com.ftn.sbnz.model.DTO.RecommendedPlantDTO;
import com.ftn.sbnz.model.DTO.PlantLifespan
import java.util.Set
import com.ftn.sbnz.model.PerennialPlant;
import com.ftn.sbnz.model.DTO.RecommendedPlantsForAlarms;
import com.ftn.sbnz.model.AnnualPlant;


global Set<RecommendedPlantDTO> recommendations;
global RecommendedPlantsForAlarms recommendationsForAlarms;


rule "Detect optimal sowing conditions"
when
    $conditions: List() from accumulate(
        WeatherCondition($date: measurementDate, $temperature: temperature, $precipitation: precipitation)
        over window:time(5d),
        collectList($date)
    )
    $averageTemperature: Double() from accumulate(
        WeatherCondition($temperature: temperature) over window:time(5d),
        average($temperature)
    )
    $averagePrecipitation: Double() from accumulate(
        WeatherCondition($precipitation: precipitation) over window:time(5d),
        average($precipitation)
    )
    eval($averageTemperature >= 15.0 && $averageTemperature <= 25.0)
    eval($averagePrecipitation >= 20.0 && $averagePrecipitation <= 100.0)
then
    System.out.println($averageTemperature);
    System.out.println($averagePrecipitation);
    Alarm optimalPlantingConditionsAlarm = new Alarm();
    optimalPlantingConditionsAlarm.setType(AlarmType.OPTIMAL_PLANTING_CONDITIONS);
    System.out.println("Optimal weather conditions detected for sowing based on the last 10 days of weather data.");
    optimalPlantingConditionsAlarm.setMessage("Optimal weather conditions detected for sowing based on the last 10 days of weather data.");
    insert(optimalPlantingConditionsAlarm);
end

rule "Analyze soil moisture after detecting optimal sowing conditions"
when
    $optimalPlantingConditionsAlarm: Alarm(type == AlarmType.OPTIMAL_PLANTING_CONDITIONS)
    $soilMoisture: SoilMoisture(moistureLevel >= 20.0 && moistureLevel <= 80.0) over window:time(1d)
then
    System.out.println("Soil moisture level is optimal. Proceed with planting.");
    Alarm moistureAlarm = new Alarm(AlarmType.OPTIMAL_SOIL_MOISTURE, "Soil moisture level is optimal. Proceed with planting.");
    insert(moistureAlarm);
end

rule "Recommend plants for optimal sowing conditions"
when
    $recommendation: Alarm(type == AlarmType.OPTIMAL_SOIL_MOISTURE)
    $plant: AnnualPlant()
    not RecommendedPlantDTO( name == $plant.name)

then
    System.out.println("Soil moisture level is optimal. Proceed with planting.");
    RecommendedPlantDTO recommendedPlant = new RecommendedPlantDTO();
    recommendedPlant.setId($plant.getId());
    recommendedPlant.setName($plant.getName());
    recommendedPlant.setHeight($plant.getHeight());
    recommendedPlant.setPlantType($plant.getPlantType());
    recommendedPlant.setFunctionalities($plant.getPlantFunctionalities());
    recommendedPlant.setLightHoursNeeded($plant.getLightHoursNeeded());
    recommendedPlant.setSuitableSoils($plant.getSuitableSoilTypes());
    recommendedPlant.setPlantLifespan(PlantLifespan.ANNUAL);
    recommendationsForAlarms.getRecommendedPlants().add(recommendedPlant);
    recommendations.add(recommendedPlant);
    insert(recommendedPlant);
end
